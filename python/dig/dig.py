# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dig', [dirname(__file__)])
        except ImportError:
            import _dig
            return _dig
        if fp is not None:
            try:
                _mod = imp.load_module('_dig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dig = swig_import_helper()
    del swig_import_helper
else:
    import _dig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def swigTest(*args):
  return _dig.swigTest(*args)
swigTest = _dig.swigTest

def swigArrayTest(*args):
  return _dig.swigArrayTest(*args)
swigArrayTest = _dig.swigArrayTest
EUCLIDEAN = _dig.EUCLIDEAN
ED = _dig.ED
DYNAMIC_TIME_WARPING = _dig.DYNAMIC_TIME_WARPING
DTW = _dig.DTW
UNIFORM_SCALING = _dig.UNIFORM_SCALING
US = _dig.US
SCALED_WARPED_MATCHING = _dig.SCALED_WARPED_MATCHING
SWM = _dig.SWM
class DistanceMeasureParams(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timeWarping = _swig_property(_dig.DistanceMeasureParams_timeWarping_get, _dig.DistanceMeasureParams_timeWarping_set)
    timeScaling = _swig_property(_dig.DistanceMeasureParams_timeScaling_get, _dig.DistanceMeasureParams_timeScaling_set)
    def __init__(self, warp=0, scaling=0): 
        this = _dig.new_DistanceMeasureParams(warp, scaling)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dig.delete_DistanceMeasureParams
    __del__ = lambda self : None;
DistanceMeasureParams_swigregister = _dig.DistanceMeasureParams_swigregister
DistanceMeasureParams_swigregister(DistanceMeasureParams)

AGGRESSIVE = _dig.AGGRESSIVE
MODERATE = _dig.MODERATE
CAUTIOUS = _dig.CAUTIOUS

def dist_L1(*args):
  return _dig.dist_L1(*args)
dist_L1 = _dig.dist_L1

def dist_L2(*args):
  return _dig.dist_L2(*args)
dist_L2 = _dig.dist_L2

def dist_dtw(*args):
  return _dig.dist_dtw(*args)
dist_dtw = _dig.dist_dtw
NN_L1 = _dig.NN_L1
NN_L2 = _dig.NN_L2
NN_DTW = _dig.NN_DTW
LOGICAL_SHAPELET = _dig.LOGICAL_SHAPELET
AdjustedConfidence = _dig.AdjustedConfidence
class TSClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dig.new_TSClassifier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dig.delete_TSClassifier
    __del__ = lambda self : None;
    def setAlgorithm(self, *args): return _dig.TSClassifier_setAlgorithm(self, *args)
    def addExample(self, *args): return _dig.TSClassifier_addExample(self, *args)
    def classify(self, *args): return _dig.TSClassifier_classify(self, *args)
TSClassifier_swigregister = _dig.TSClassifier_swigregister
TSClassifier_swigregister(TSClassifier)

class OrderedReals(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dig.delete_OrderedReals
    __del__ = lambda self : None;
    def getRawData(self): return _dig.OrderedReals_getRawData(self)
    def getBitsForPosition(self, *args): return _dig.OrderedReals_getBitsForPosition(self, *args)
    def distanceTo(self, *args): return _dig.OrderedReals_distanceTo(self, *args)
OrderedReals_swigregister = _dig.OrderedReals_swigregister
OrderedReals_swigregister(OrderedReals)

class SubsequenceLocation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(_dig.SubsequenceLocation_start_get, _dig.SubsequenceLocation_start_set)
    end = _swig_property(_dig.SubsequenceLocation_end_get, _dig.SubsequenceLocation_end_set)
    dist = _swig_property(_dig.SubsequenceLocation_dist_get, _dig.SubsequenceLocation_dist_set)
    def __init__(self): 
        this = _dig.new_SubsequenceLocation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dig.delete_SubsequenceLocation
    __del__ = lambda self : None;
SubsequenceLocation_swigregister = _dig.SubsequenceLocation_swigregister
SubsequenceLocation_swigregister(SubsequenceLocation)



